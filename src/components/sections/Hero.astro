---
import { getBasics } from "@/utils/cvLoader";
import Section from "@/components/Section.astro";
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";

const basics = await getBasics();
const { name, label, image, location, profiles, email } = basics;
const { city, region, address } = location || {};
---

<Section>
  <div class="hero-container">
    <!-- Avatar Section - Top Position -->
    {image && (
      <div class="avatar-section">
        <figure class="avatar-figure">
          <Image
            class="avatar-image"
            height={600}
            width={600}
            src={image!}
            alt={name}
          />
          <!-- Preserved decorative borders -->
          <div class="avatar-decorations">
            <div class="border-right"></div>
            <div class="border-left"></div>
            <div class="border-bottom"></div>
            <div class="border-top"></div>
          </div>
        </figure>
      </div>
    )}

    <!-- Info Section - Below Avatar -->
    <div class="info-section">
      <div class="name-title">
        <h1 class="name">{name}</h1>
        <h2 class="title">{label}</h2>
      </div>

      <div class="location-info">
        <Icon class="location-icon" name="mdi:world" width={18} height={18} />
        <span class="location-text">{address}, {city}, {region}</span>
      </div>

      <!-- Contact & Social Links -->
      <div class="contact-section">
        <!-- Print version -->
        <div class="print-contact">
          {email}
        </div>

        <!-- Interactive version -->
        <div class="interactive-contact">
          {
            email && (
              <a
                href={`mailto:${email}`}
                title={`Email`}
                target="_blank"
                rel="noopener noreferrer"
                class="contact-link"
              >
                <Icon name="mdi:email" width={18} height={18} />
                <span class="contact-text">Email</span>
              </a>
            )
          }

          {
            profiles?.map(({ network, url, icon }) => (
              <a
                href={url}
                title={`访问 ${name} 在 ${network} 上的主页`}
                target="_blank"
                rel="noopener noreferrer"
                class="contact-link"
              >
                <Icon name={icon} width={18} height={18} />
                <span class="contact-text">{network}</span>
              </a>
            ))
          }
        </div>
      </div>
    </div>
  </div>
</Section>

<style>
  .hero-container {
    @apply flex flex-col items-center gap-8 text-center;
  }

  /* Avatar Section - Top Position */
  .avatar-section {
    @apply flex justify-center print:hidden;
  }

  .avatar-figure {
    @apply relative w-fit;
  }

  .avatar-image {
    @apply h-32 w-32 rounded-2xl object-cover shadow-lg sm:h-40 sm:w-40 lg:h-48 lg:w-48;
    box-shadow:
      0 10px 15px -3px rgba(var(--color), 0.2),
      0 4px 6px -2px rgba(var(--color), 0.1);
  }

  .avatar-decorations {
    @apply pointer-events-none absolute -inset-2;
  }

  .border-right,
  .border-left {
    @apply absolute -inset-y-8 w-px;
    background-color: rgba(var(--color), 0.5);
    mask-image: linear-gradient(
      to top,
      transparent,
      white 4rem,
      white calc(100% - 4rem),
      transparent
    );
  }

  .border-right {
    @apply right-0;
  }

  .border-left {
    @apply left-0;
  }

  .border-bottom,
  .border-top {
    @apply absolute -inset-x-8 h-px;
    background-color: rgba(var(--color), 0.5);
    mask-image: linear-gradient(
      to left,
      transparent,
      white 4rem,
      white calc(100% - 4rem),
      transparent
    );
  }

  .border-bottom {
    @apply bottom-0;
  }

  .border-top {
    @apply top-0;
  }

  /* Info Section - Below Avatar */
  .info-section {
    @apply flex flex-col items-center gap-6;
  }

  .name-title {
    @apply space-y-3 text-center;
  }

  .name {
    @apply text-3xl font-bold leading-tight text-skin-base sm:text-4xl lg:text-4xl print:text-3xl;
  }

  .title {
    @apply text-base font-medium text-skin-muted sm:text-lg lg:text-xl print:text-lg;
  }

  .location-info {
    @apply flex items-center justify-center gap-2 text-skin-muted print:hidden;
  }

  .location-icon {
    @apply text-skin-hue;
  }

  .location-text {
    @apply text-sm lg:text-base;
  }

  /* Contact Section */
  .contact-section {
    @apply space-y-4;
  }

  .print-contact {
    @apply hidden text-sm text-skin-base print:block;
  }

  .interactive-contact {
    @apply flex flex-wrap justify-center gap-3 print:hidden;
  }

  .contact-link,
  .theme-toggle {
    @apply flex items-center gap-2 rounded-lg px-3 py-2 text-sm font-medium text-skin-hue transition-all duration-300 hover:bg-skin-hue hover:text-skin-inverted;
    background-color: rgba(var(--color), 0.08);
    border: 1px solid rgba(var(--color), 0.15);
  }

  .theme-toggle {
    @apply cursor-pointer bg-transparent hover:border-skin-hue;
    border-color: rgba(var(--color), 0.3);
  }

  .contact-text {
    @apply hidden sm:inline;
  }

  /* Responsive Design */
  @media (max-width: 640px) {
    .hero-container {
      @apply gap-6;
    }

    .name {
      @apply text-2xl;
    }

    .title {
      @apply text-sm;
    }

    .contact-link,
    .theme-toggle {
      @apply px-2 py-2 text-xs;
    }

    .contact-text {
      @apply hidden;
    }
  }

  @media (max-width: 480px) {
    .avatar-image {
      @apply h-28 w-28;
    }

    .name-title {
      @apply space-y-2;
    }

    .interactive-contact {
      @apply gap-2;
    }
  }
</style>

<script>
  const select = document.getElementById("themeSwitch") as HTMLSelectElement;
  const theme = localStorage.getItem("theme");
  const systemTheme = window.matchMedia("(prefers-color-scheme: dark)").matches
    ? "dark"
    : "light";

  if (theme !== null) {
    select.value = theme;
  } else {
    select.value = systemTheme;
  }

  function updateTheme(value: string) {
    const theme = value === "system" ? systemTheme : value;
    document.documentElement.classList.remove("light", "dark");
    document.documentElement.classList.add(theme);
    localStorage.setItem("theme", value);
  }

  updateTheme(select.value);

  select.addEventListener("change", (event: Event) => {
    const select = event.target as HTMLSelectElement;
    updateTheme(select.value);
  });

  // 打印时禁用深色模式
  window.addEventListener("beforeprint", () => {
    document.documentElement.classList.remove("dark");
  });

  // 打印后恢复深色模式
  window.addEventListener("afterprint", () => {
    if (
      select.value === "dark" ||
      (select.value === "system" && systemTheme === "dark")
    ) {
      document.documentElement.classList.add("dark");
    }
  });
</script>
